{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "fetchGeneresReport",
    "fullyQualifiedName": "utils.fetchGeneresReport",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Dashboard",
    "collectionId": "Dashboard_utils",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "() => {\n  try {\n    const myData = getMovieGenres.data.reduce((acc, item, index) => {\n      if (Array.isArray(item.genres)) {\n        item.genres.forEach(genre => {\n          let val = typeof genre === \"object\" ? genre?.name : genre;\n          if (val) {\n            if (acc[val]) {\n              acc[val] += 1;\n            } else {\n              acc[val] = 1;\n            }\n          }\n        });\n      }\n      return acc;\n    }, {});\n    return Object.entries(myData).map(([x, y]) => ({\n      x,\n      y\n    }));\n  } catch (error) {\n    console.error(error);\n  }\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [],
      "isAsync": false
    },
    "executeOnLoad": false,
    "clientSideExecution": true,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "() => {\n  try {\n    const myData = getMovieGenres.data.reduce((acc, item, index) => {\n      if (Array.isArray(item.genres)) {\n        item.genres.forEach(genre => {\n          let val = typeof genre === \"object\" ? genre?.name : genre;\n          if (val) {\n            if (acc[val]) {\n              acc[val] += 1;\n            } else {\n              acc[val] = 1;\n            }\n          }\n        });\n      }\n      return acc;\n    }, {});\n    return Object.entries(myData).map(([x, y]) => ({\n      x,\n      y\n    }));\n  } catch (error) {\n    console.error(error);\n  }\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Dashboard_utils.fetchGeneresReport",
  "deleted": false,
  "gitSyncId": "63b62f887ed3e86e225e21e4_63b79540e0474e2db847b913"
}